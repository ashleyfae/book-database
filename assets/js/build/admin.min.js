/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./assets/js/src/admin/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/src/admin/index.js":
/*!**************************************!*\
  !*** ./assets/js/src/admin/index.js ***!
  \**************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_analytics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/analytics */ "./assets/js/src/admin/modules/analytics.js");
/* harmony import */ var _modules_book_layout_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/book-layout.js */ "./assets/js/src/admin/modules/book-layout.js");
/* harmony import */ var _modules_book_index_title__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/book-index-title */ "./assets/js/src/admin/modules/book-index-title.js");
/* harmony import */ var _modules_book_links__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/book-links */ "./assets/js/src/admin/modules/book-links.js");
/* harmony import */ var _modules_categories__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/categories */ "./assets/js/src/admin/modules/categories.js");
/* harmony import */ var _modules_datepicker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/datepicker */ "./assets/js/src/admin/modules/datepicker.js");
/* harmony import */ var _modules_delete_objects__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/delete-objects */ "./assets/js/src/admin/modules/delete-objects.js");
/* harmony import */ var _modules_editions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modules/editions */ "./assets/js/src/admin/modules/editions.js");
/* harmony import */ var _modules_license__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modules/license */ "./assets/js/src/admin/modules/license.js");
/* harmony import */ var _modules_media_upload__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/media-upload */ "./assets/js/src/admin/modules/media-upload.js");
/* harmony import */ var _modules_reading_logs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/reading-logs */ "./assets/js/src/admin/modules/reading-logs.js");
/* harmony import */ var _modules_retailers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/retailers */ "./assets/js/src/admin/modules/retailers.js");
/* harmony import */ var _modules_tags__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/tags */ "./assets/js/src/admin/modules/tags.js");
/* harmony import */ var _modules_taxonomies_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./modules/taxonomies.js */ "./assets/js/src/admin/modules/taxonomies.js");
/**
 * Admin Scripts
 *
 * @package book-database
 * @copyright Copyright (c) 2019, Ashley Gibson
 * @license GPL2+
 */















(function ($) {
  _modules_analytics__WEBPACK_IMPORTED_MODULE_0__["BDB_Analytics"].init();
  _modules_book_layout_js__WEBPACK_IMPORTED_MODULE_1__["BDB_Book_Layout"].init();
  _modules_book_index_title__WEBPACK_IMPORTED_MODULE_2__["BDB_Book_Index_Title"].init();
  _modules_book_links__WEBPACK_IMPORTED_MODULE_3__["BDB_Book_Links"].init();
  _modules_categories__WEBPACK_IMPORTED_MODULE_4__["BDB_Categories"].init();
  _modules_datepicker__WEBPACK_IMPORTED_MODULE_5__["BDB_Datepicker"].init();
  _modules_delete_objects__WEBPACK_IMPORTED_MODULE_6__["BDB_Delete_Objects"].init();
  _modules_editions__WEBPACK_IMPORTED_MODULE_7__["BDB_Editions"].init();
  _modules_license__WEBPACK_IMPORTED_MODULE_8__["BDB_License"].init();
  _modules_media_upload__WEBPACK_IMPORTED_MODULE_9__["BDB_Media"].init();
  _modules_reading_logs__WEBPACK_IMPORTED_MODULE_10__["BDB_Reading_Logs"].init();
  _modules_retailers__WEBPACK_IMPORTED_MODULE_11__["BDB_Retailers"].init();
  _modules_tags__WEBPACK_IMPORTED_MODULE_12__["BDB_Tags"].init();
  _modules_taxonomies_js__WEBPACK_IMPORTED_MODULE_13__["BDB_Book_Taxonomies"].init();
})(jQuery);

/***/ }),

/***/ "./assets/js/src/admin/modules/analytics.js":
/*!**************************************************!*\
  !*** ./assets/js/src/admin/modules/analytics.js ***!
  \**************************************************/
/*! exports provided: BDB_Analytics */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_Analytics", function() { return BDB_Analytics; });
/* harmony import */ var _dates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dates */ "./assets/js/src/admin/modules/dates.js");
/* harmony import */ var utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils */ "./assets/js/src/utils/index.js");
/* harmony import */ var _datepicker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./datepicker */ "./assets/js/src/admin/modules/datepicker.js");
/* global $, bdbVars, wp */



/**
 * Analytics
 */

var BDB_Analytics = {
  /**
   * Selected date range value
   */
  range: 'this-year',
  batches: [],
  numbers: ['number-books-finished', 'number-dnf', 'number-new-books', 'number-rereads', 'number-pages-read', 'reading-track', 'number-reviews', 'avg-rating', 'number-different-series', 'number-standalones', 'number-authors'],
  tables: ['rating-breakdown', 'pages-breakdown', 'reviews-written', 'read-not-reviewed'],

  /**
   * Initialize
   */
  init: function init() {
    if (!document.getElementById('bdb-book-analytics-wrap')) {
      return;
    }

    $('.bdb-taxonomy-breakdown').each(function () {
      var id = $(this).attr('id').replace('bdb-', '');
      BDB_Analytics.tables.push(id);
    });
    BDB_Analytics.batches = [BDB_Analytics.numbers, BDB_Analytics.tables];
    $('#bdb-range').on('change', this.setRanges);
    $('#bdb-date-range button').on('click', function (e) {
      e.preventDefault();
      BDB_Analytics.getStats();
    }).trigger('click');
  },

  /**
   * Set the date ranges
   *
   * @param e
   */
  setRanges: function setRanges(e) {
    BDB_Analytics.range = $(this).val();

    if ('custom' === BDB_Analytics.range) {
      $('#bdb-start').val('').attr('type', 'text').addClass('bdb-datepicker');
      $('#bdb-end').val('').attr('type', 'text').addClass('bdb-datepicker');
      _datepicker__WEBPACK_IMPORTED_MODULE_2__["BDB_Datepicker"].setDatepickers();
    } else {
      var selected = $(this).find('option:selected');
      $('#bdb-start').val(selected.data('start')).attr('type', 'hidden').removeClass('bdb-datepicker');
      $('#bdb-end').val(selected.data('end')).attr('type', 'hidden').removeClass('bdb-datepicker');
    }
  },

  /**
   * Get the HTML string to insert into the DOM to indicate the stat is loading.
   *
   * @returns {string}
   */
  getLoadingString: function getLoadingString() {
    return '<div id="bdb-circleG"><div id="bdb-circleG_1" class="bdb-circleG"></div><div id="bdb-circleG_2" class="bdb-circleG"></div><div id="bdb-circleG_3" class="bdb-circleG"></div></div>';
  },

  /**
   * Get the stats for the provided date range
   */
  getStats: function getStats() {
    // Empty the results and set up spinners.
    $('.bdb-result').empty();
    $('.bdb-loading').html(BDB_Analytics.getLoadingString()).show();

    for (var i = 0; i < BDB_Analytics.batches.length; i++) {
      var args = {
        start_date: Object(_dates__WEBPACK_IMPORTED_MODULE_0__["dateLocalToUTC"])($('#bdb-start').val()),
        end_date: Object(_dates__WEBPACK_IMPORTED_MODULE_0__["dateLocalToUTC"])($('#bdb-end').val()),
        stats: BDB_Analytics.batches[i],
        args: {
          rating_format: 'text'
        }
      };
      Object(utils__WEBPACK_IMPORTED_MODULE_1__["apiRequest"])('v1/analytics', args, 'GET').then(function (apiResponse) {
        $.each(apiResponse, function (statKey, statValue) {
          var wrap = $('#bdb-' + statKey); // Set up format for "on track to read".

          if ('reading-track' === statKey) {
            if ('this-month' === BDB_Analytics.range) {
              statValue = bdbVars.on_track_month.replace('%d', statValue);
            } else if ('this-year' === BDB_Analytics.range) {
              statValue = bdbVars.on_track_year.replace('%d', statValue);
            } else {
              statValue = '';
            }
          } // Date conversions.


          if ('reviews-written' === statKey && Array === statValue.constructor) {
            $.each(statValue, function (statItemKey, statItem) {
              statValue[statItemKey].date_written_formatted = Object(_dates__WEBPACK_IMPORTED_MODULE_0__["dateUTCtoLocal"])(statItem.date_written, 'display');
            });
          }

          if ('read-not-reviewed' === statKey && Array === statValue.constructor) {
            $.each(statValue, function (statItemKey, statItem) {
              statValue[statItemKey].date_finished_formatted = Object(_dates__WEBPACK_IMPORTED_MODULE_0__["dateUTCtoLocal"])(statItem.date_finished, 'display');
            });
          } // Check for an Underscore.js template.


          var templateID = statKey;

          if (templateID.includes('taxonomy-')) {
            templateID = 'taxonomy-breakdown';
          }

          if (Array === statValue.constructor && document.getElementById('tmpl-bdb-analytics-' + templateID + '-table-row')) {
            var template = wp.template('bdb-analytics-' + templateID + '-table-row');
            var html = '';
            $.each(statValue, function (statItemKey, statItem) {
              html += template(statItem);
            });
            statValue = html;
          }

          wrap.find('.bdb-result').empty().append(statValue);
          wrap.find('.bdb-loading').empty().hide();
        });
      }).catch(function (error) {});
    }
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/admin/modules/book-index-title.js":
/*!*********************************************************!*\
  !*** ./assets/js/src/admin/modules/book-index-title.js ***!
  \*********************************************************/
/*! exports provided: BDB_Book_Index_Title */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_Book_Index_Title", function() { return BDB_Book_Index_Title; });
/* harmony import */ var utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils */ "./assets/js/src/utils/index.js");
/* global $, bdbVars, wp */

var BDB_Book_Index_Title = {
  bookTitleField: false,
  indexTitleSelect: false,
  indexTitleCustomField: false,

  /**
   * Initialize
   */
  init: function init() {
    this.bookTitleField = $('#bdb-book-title');
    this.indexTitleSelect = $('#bdb-book-index-title');
    this.indexTitleCustomField = $('#bdb-book-index-title-custom');
    this.indexTitleSelect.on('change', this.toggleCustomIndexTitle).trigger('change');
    this.bookTitleField.on('keyup', this.writeOriginalTitle);
    this.bookTitleField.on('blur', this.populateIndexTitles);
  },

  /**
   * Show the "Custom" box if "Custom" is selected. Otherwise, hide it.
   */
  toggleCustomIndexTitle: function toggleCustomIndexTitle() {
    var selectedIndexTitle = $(this).val();

    if ('custom' === selectedIndexTitle) {
      BDB_Book_Index_Title.indexTitleCustomField.slideDown().css('display', 'block');
    } else {
      BDB_Book_Index_Title.indexTitleCustomField.slideUp();
    }
  },

  /**
   * Copies the contents of the original "Book Title" field to the "original" index title option.
   */
  writeOriginalTitle: function writeOriginalTitle() {
    BDB_Book_Index_Title.indexTitleSelect.find('option[value="original"]').text($(this).val());
  },

  /**
   * Create an index-friendly version of the entered book title and insert it as an
   * option in the <select> dropdown.
   */
  populateIndexTitles: function populateIndexTitles() {
    var args = {
      title: $(this).val()
    };
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/book/index-title', args, 'GET').then(function (response) {
      BDB_Book_Index_Title.indexTitleSelect.find('option[value="original"]').after('<option value="' + response + '">' + response + '</option>');
    }).catch(function (error) {
      console.log('Index title generation error', error);
    });
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/admin/modules/book-layout.js":
/*!****************************************************!*\
  !*** ./assets/js/src/admin/modules/book-layout.js ***!
  \****************************************************/
/*! exports provided: BDB_Book_Layout */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_Book_Layout", function() { return BDB_Book_Layout; });
/* global $, bdbVars, wp */

/**
 * Book Layout
 */
var BDB_Book_Layout = {
  /**
   * Initialize
   */
  init: function init() {
    $('.bdb-book-option-toggle').on('click', this.toggleBookTextarea);
    $('#bdb-book-layout-cover-changer').on('change', this.changeCoverAlignment);
    this.sort();
  },

  /**
   * Toggle the book textarea
   *
   * @param e
   */
  toggleBookTextarea: function toggleBookTextarea(e) {
    $(this).next().slideToggle();
  },

  /**
   * Change the real-time alignment of the book coversss123
   *
   * @param e
   */
  changeCoverAlignment: function changeCoverAlignment(e) {
    var parentDiv = $('#bdb-book-option-cover');
    parentDiv.removeClass(function (index, css) {
      return (css.match(/(^|\s)bdb-book-cover-align-\S+/g) || []).join(' ');
    }).addClass('bdb-book-cover-align-' + $(this).val());
  },
  sort: function sort() {
    $('.bdb-sortable').sortable({
      cancel: '.bdb-no-sort, textarea, input, select',
      connectWith: '.bdb-sortable',
      placeholder: 'bdb-sortable-placeholder',
      update: function update(event, ui) {
        var parentID = ui.item.parent().attr('id');
        var disabledIndicator = ui.item.find('.bdb-book-option-disabled');

        if ($('#' + parentID).hasClass('bdb-sorter-enabled-column')) {
          disabledIndicator.val('false');
        } else {
          disabledIndicator.val('true');
        }
      }
    });
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/admin/modules/book-links.js":
/*!***************************************************!*\
  !*** ./assets/js/src/admin/modules/book-links.js ***!
  \***************************************************/
/*! exports provided: BDB_Book_Links */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_Book_Links", function() { return BDB_Book_Links; });
/* harmony import */ var utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils */ "./assets/js/src/utils/index.js");
/* global $, bdbVars, wp */

/**
 * Book Links
 */

var BDB_Book_Links = {
  bookID: 0,
  linkWrap: false,
  linkTemplateAdd: wp.template('bdb-book-link-add'),
  linkTemplateEdit: wp.template('bdb-book-link-edit'),
  errorWrap: '',

  /**
   * Initialize
   */
  init: function init() {
    this.bookID = $('#bdb-book-id').val();
    this.linkWrap = $('#bdb-book-links');
    this.errorWrap = $('#bdb-book-links-errors');

    if (!this.linkWrap.length) {
      return;
    }

    $('#bdb-new-purchase-link').on('keydown', 'input', this.clickOnEnter);
    $('#bdb-new-purchase-link').on('click', 'button', this.addLink);
    $(document).on('click', '.bdb-update-book-link', this.updateLink);
    $(document).on('click', '.bdb-remove-book-link', this.deleteLink);
    this.getLinks();
  },

  /**
   * Get the links
   */
  getLinks: function getLinks() {
    if (!this.bookID) {
      return;
    }

    var args = {
      book_id: BDB_Book_Links.bookID,
      number: 50
    };
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/book-link', args, 'GET').then(function (apiResponse) {
      BDB_Book_Links.linkWrap.empty();

      if (0 === apiResponse.length || 'undefined' === typeof apiResponse.length) {// Do nothing.
      } else {
        $.each(apiResponse, function (key, link) {
          BDB_Book_Links.linkWrap.append(BDB_Book_Links.linkTemplateEdit(link));
        });
      }
    }).catch(function (error) {
      BDB_Book_Links.errorWrap.empty().append(error).show();
    });
  },

  /**
   * Trigger a button click when pressing `enter` inside an `<input>` field.
   *
   * @param e
   */
  clickOnEnter: function clickOnEnter(e) {
    if (13 === e.keyCode) {
      e.preventDefault();
      $('#bdb-new-purchase-link').find('button').trigger('click');
    }
  },

  /**
   * Add a new link
   *
   * @param e
   */
  addLink: function addLink(e) {
    e.preventDefault();
    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Book_Links.errorWrap.empty().hide();

    if (BDB_Book_Links.bookID) {
      // Editing an existing book.
      var args = {
        book_id: BDB_Book_Links.bookID,
        retailer_id: $('#bdb-new-book-link-retailer').val(),
        url: $('#bdb-new-book-link-url').val()
      };
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/book-link/add', args, 'POST').then(function (apiResponse) {
        BDB_Book_Links.linkWrap.append(BDB_Book_Links.linkTemplateEdit(apiResponse)); // Wipe field values.

        $('#bdb-new-purchase-link').find('input').val('');
        Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
      }).catch(function (errorMessage) {
        BDB_Book_Links.errorWrap.append(errorMessage).show();
        Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
      });
    } else {
      // Adding a new book.
      var data = {
        id: $('.bdb-book-link').length,
        retailer_id: $('#bdb-new-book-link-retailer').val(),
        url: $('#bdb-new-book-link-url').val()
      };
      BDB_Book_Links.linkWrap.append(BDB_Book_Links.linkTemplateAdd(data)); // Wipe field values.

      $('#bdb-new-purchase-link').find('input').val('');
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    }
  },

  /**
   * Update a link
   *
   * @param e
   */
  updateLink: function updateLink(e) {
    e.preventDefault();
    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Book_Links.errorWrap.empty().hide();
    var wrap = button.closest('.bdb-book-link');
    var args = {
      retailer_id: wrap.find('.bdb-book-link-retailer').val(),
      url: wrap.find('.bdb-book-link-url').val()
    };
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/book-link/update/' + wrap.data('id'), args, 'POST').then(function (apiResponse) {
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    }).catch(function (errorMessage) {
      BDB_Book_Links.errorWrap.append(errorMessage).show();
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  },

  /**
   * Delete a link
   *
   * @param e
   */
  deleteLink: function deleteLink(e) {
    e.preventDefault();

    if (!confirm(bdbVars.confirm_delete_book_link)) {
      return false;
    }

    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Book_Links.errorWrap.empty().hide();
    var wrap = button.closest('.bdb-book-link');

    if (BDB_Book_Links.bookID) {
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/book-link/delete/' + wrap.data('id'), {}, 'DELETE').then(function (apiResponse) {
        wrap.remove();
      }).catch(function (errorMessage) {
        BDB_Book_Links.errorWrap.append(errorMessage).show();
        Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
      });
    } else {
      wrap.remove();
    }
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/admin/modules/categories.js":
/*!***************************************************!*\
  !*** ./assets/js/src/admin/modules/categories.js ***!
  \***************************************************/
/*! exports provided: BDB_Categories */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_Categories", function() { return BDB_Categories; });
/* global $, bdbVars, wp */

/**
 * Category style checkboxes
 */
var BDB_Categories = {
  /**
   * Initialize
   */
  init: function init() {
    $('.bdb-new-checkbox-term').on('click', '.button', this.addCheckboxTerm);
    $('.bdb-new-checkbox-term-value').on('keypress', this.addCheckboxTerm);
  },
  addCheckboxTerm: function addCheckboxTerm(e) {
    if ('click' === e.type) {
      e.preventDefault();
    }

    if ('keypress' === e.type && 13 !== e.which) {
      return true;
    } else {
      e.preventDefault();
    }

    var wrap = $(this).closest('.bdb-taxonomy-checkboxes'),
        checkboxName = wrap.data('name'),
        checkboxTaxonomy = wrap.data('taxonomy'),
        checkboxWrap = wrap.find('.bdb-checkbox-wrap'),
        newTerm = wrap.find('.bdb-new-checkbox-term-value'),
        elID = BDB_Categories.createID(newTerm.val(), checkboxTaxonomy + '-');
    checkboxWrap.append('<label for="' + elID + '"><input type="checkbox" id="' + elID + '" name="' + checkboxName + '" class="bdb" value="' + newTerm.val() + '" checked="checked"> ' + newTerm.val() + '</label>');
    newTerm.val('');
  },
  createID: function createID(value, prefix) {
    return value.replace(/[^a-z0-9]/g, function (s) {
      var c = s.charCodeAt(0);

      if (32 === c) {
        return '-';
      }

      if (c >= 65 && c <= 90) {
        return prefix + s.toLowerCase();
      }

      return prefix + ('000' + c.toString(16)).slice(-4);
    });
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/admin/modules/datepicker.js":
/*!***************************************************!*\
  !*** ./assets/js/src/admin/modules/datepicker.js ***!
  \***************************************************/
/*! exports provided: BDB_Datepicker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_Datepicker", function() { return BDB_Datepicker; });
/* global $, bdbVars, wp */

/**
 * Datepicker
 */
var BDB_Datepicker = {
  /**
   * Initialize
   */
  init: function init() {
    if ($('.bdb-datepicker').length > 0) {
      this.setDatepickers();
    }

    $(document).on('bdb_editions_loaded', this.setDatepickers);
    $(document).on('bdb_edition_added', this.setDatepickers);
    $(document).on('bdb_edition_updated', this.setDatepickers);
    $(document).on('bdb_reading_logs_loaded', this.setDatepickers);
    $(document).on('bdb_reading_log_added', this.setDatepickers);
    $(document).on('bdb_reading_log_updated', this.setDatepickers);
  },

  /**
   * Set datepickers
   */
  setDatepickers: function setDatepickers() {
    $('.bdb-datepicker').datepicker({
      dateFormat: 'yy-mm-dd',
      beforeShow: function beforeShow() {
        $(this).datepicker('widget').addClass('bdb-datepicker-wrap');
      },
      onClose: function onClose() {
        $(this).datepicker('widget').removeClass('bdb-datepicker-wrap');
      }
    });
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/admin/modules/dates.js":
/*!**********************************************!*\
  !*** ./assets/js/src/admin/modules/dates.js ***!
  \**********************************************/
/*! exports provided: dateUTCtoLocal, dateLocalToUTC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dateUTCtoLocal", function() { return dateUTCtoLocal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dateLocalToUTC", function() { return dateLocalToUTC; });
/* global $, bdbVars, moment */
var formatMySQL = 'YYYY-MM-DD HH:mm:ss';
var formatDisplay = 'MMMM D, YYYY';
/**
 * Converts a UTC date string to local time in YYYY-mm-dd format.
 *
 * @param {string} utcDate
 * @param {string} format
 * @returns {string}
 */

function dateUTCtoLocal(utcDate) {
  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'mysql';

  if ('' === utcDate || !utcDate) {
    return '';
  }

  if ('display' === format) {
    format = formatDisplay;
  } else {
    format = formatMySQL;
  }

  utcDate = moment.utc(utcDate); //console.log( 'UTC Date', utcDate );

  var localDate = utcDate.local().format(format); //console.log( 'Local Date', localDate );

  return localDate;
}
/**
 * Converts a local date string to UTC in YYYY-mm-dd format.
 *
 * @param {string} localDate
 * @returns {string}
 */

function dateLocalToUTC(localDate) {
  if ('' === localDate || !localDate) {
    return '';
  }

  localDate = moment(localDate); //console.log( 'Local Date', localDate );

  var utcDate = localDate.utc().format(formatMySQL); //console.log( 'UTC Date', utcDate );

  return utcDate;
}

/***/ }),

/***/ "./assets/js/src/admin/modules/delete-objects.js":
/*!*******************************************************!*\
  !*** ./assets/js/src/admin/modules/delete-objects.js ***!
  \*******************************************************/
/*! exports provided: BDB_Delete_Objects */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_Delete_Objects", function() { return BDB_Delete_Objects; });
/* global $, bdbVars, wp */

/**
 * Confirmation when deleting objects
 */
var BDB_Delete_Objects = {
  /**
   * Initialize
   */
  init: function init() {
    $('.bdb-delete-item').on('click', this.confirm);
  },

  /**
   * Confirm deleting the item
   *
   * @param e
   * @returns {boolean}
   */
  confirm: function (_confirm) {
    function confirm(_x) {
      return _confirm.apply(this, arguments);
    }

    confirm.toString = function () {
      return _confirm.toString();
    };

    return confirm;
  }(function (e) {
    var type = $(this).data('object');
    var message = bdbVars['confirm_delete_' + type];

    if (!confirm(message)) {
      return false;
    }

    return true;
  })
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/admin/modules/editions.js":
/*!*************************************************!*\
  !*** ./assets/js/src/admin/modules/editions.js ***!
  \*************************************************/
/*! exports provided: BDB_Editions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_Editions", function() { return BDB_Editions; });
/* harmony import */ var utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils */ "./assets/js/src/utils/index.js");
/* harmony import */ var _dates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dates */ "./assets/js/src/admin/modules/dates.js");
/* global $, bdbVars, wp */


/**
 * Editions
 */

var BDB_Editions = {
  bookID: 0,
  tableBody: false,
  rowTemplate: wp.template('bdb-editions-table-row'),
  rowEmptyTemplate: wp.template('bdb-editions-table-row-empty'),
  errorWrap: '',

  /**
   * Initialize
   */
  init: function init() {
    this.bookID = $('#bdb-book-id').val();
    this.tableBody = $('#bdb-book-editions-list .wp-list-table tbody');
    this.errorWrap = $('#bdb-editions-errors');

    if (!this.tableBody.length || 'undefined' === typeof this.bookID || !this.bookID) {
      return;
    }

    $('#bdb-add-edition').on('click', this.toggleNewEditionFields);
    $('#bdb-submit-new-edition').on('click', this.addEdition);
    $(document).on('click', '.bdb-edition-toggle-editable', this.toggleEditableFields);
    $(document).on('click', '.bdb-update-edition', this.updateEdition);
    $(document).on('click', '.bdb-remove-edition', this.removeEdition);
    this.getEditions();
  },

  /**
   * Get the editions
   */
  getEditions: function getEditions() {
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/edition', {
      book_id: BDB_Editions.bookID,
      number: 50
    }, 'GET').then(function (response) {
      BDB_Editions.tableBody.empty();

      if (0 === response.length || 'undefined' === typeof response.length) {
        BDB_Editions.tableBody.append(BDB_Editions.rowEmptyTemplate);
      } else {
        $('#bdb-book-editions-empty').remove();
        $.each(response, function (key, edition) {
          edition.date_acquired_formatted = Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateUTCtoLocal"])(edition.date_acquired, 'display');
          edition.date_acquired = Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateUTCtoLocal"])(edition.date_acquired);
          BDB_Editions.tableBody.append(BDB_Editions.rowTemplate(edition));
        });
      }

      $(document).trigger('bdb_editions_loaded');
    }).catch(function (error) {
      BDB_Editions.errorWrap.empty().append(error).show();
    });
  },

  /**
   * Toggle the new edition fields
   *
   * @param e
   */
  toggleNewEditionFields: function toggleNewEditionFields(e) {
    if ('undefined' !== typeof e) {
      e.preventDefault();
    }

    $('#bdb-new-edition-fields').slideToggle();
  },

  /**
   * Add a new edition
   *
   * @param e
   */
  addEdition: function addEdition(e) {
    e.preventDefault();
    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Editions.errorWrap.empty().hide();
    var args = {
      book_id: BDB_Editions.bookID,
      isbn: $('#bdb-new-edition-isbn').val(),
      format: $('#bdb-new-edition-format').val(),
      date_acquired: Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateLocalToUTC"])($('#bdb-new-edition-date-acquired').val()),
      source_id: $('#bdb-checkboxes-source-edition').find('input:checked').val(),
      signed: $('#bdb-new-edition-signed').prop('checked') ? 1 : 0
    };
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/edition/add', args, 'POST').then(function (apiResponse) {
      apiResponse.date_acquired_formatted = Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateUTCtoLocal"])(apiResponse.date_acquired, 'display');
      apiResponse.date_acquired = Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateUTCtoLocal"])(apiResponse.date_acquired);
      $('#bdb-book-editions-empty').remove();
      BDB_Editions.tableBody.append(BDB_Editions.rowTemplate(apiResponse)); // Wipe new field values.

      var newFieldsWrap = $('#bdb-new-edition-fields');
      newFieldsWrap.find('input[type="text"]').val('');
      newFieldsWrap.find('input[type="checkbox"]').prop('checked', false);
      BDB_Editions.toggleNewEditionFields(); // Trigger event.

      $(document).trigger('bdb_edition_added', apiResponse);
    }).catch(function (errorMessage) {
      BDB_Editions.errorWrap.append(errorMessage).show();
    }).finally(function () {
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  },

  /**
   * Toggle the editable edition fields
   *
   * @param e
   */
  toggleEditableFields: function toggleEditableFields(e) {
    e.preventDefault();
    var button = $(this);
    var wrap = button.closest('tr');
    wrap.find('.bdb-table-display-value').hide();
    wrap.find('.bdb-table-edit-value').show();
    button.removeClass('bdb-edition-toggle-editable').addClass('bdb-update-edition button-primary').text(bdbVars.save);
  },

  /**
   * Update an edition
   *
   * @param e
   */
  updateEdition: function updateEdition(e) {
    e.preventDefault();
    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Editions.errorWrap.empty().hide();
    var wrap = button.closest('tr');
    var args = {
      isbn: wrap.find('.bdb-edition-isbn input').val(),
      format: wrap.find('.bdb-edition-format select').val(),
      date_acquired: Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateLocalToUTC"])(wrap.find('.bdb-edition-date-acquired input').val()),
      source_id: wrap.find('.bdb-edition-source select').val(),
      signed: wrap.find('.bdb-edition-signed input[type="checkbox"]').prop('checked') ? 1 : 0
    };
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/edition/update/' + wrap.data('id'), args, 'POST').then(function (apiResponse) {
      apiResponse.date_acquired_formatted = Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateUTCtoLocal"])(apiResponse.date_acquired, 'display');
      apiResponse.date_acquired = Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateUTCtoLocal"])(apiResponse.date_acquired);
      wrap.replaceWith(BDB_Editions.rowTemplate(apiResponse));
      $(document).trigger('bdb_edition_updated', apiResponse);
    }).catch(function (errorMessage) {
      BDB_Editions.errorWrap.append(errorMessage).show();
    }).finally(function () {
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  },

  /**
   * Delete an edition
   *
   * @param e
   * @returns {boolean}
   */
  removeEdition: function removeEdition(e) {
    e.preventDefault();

    if (!confirm(bdbVars.confirm_delete_edition)) {
      return false;
    }

    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Editions.errorWrap.empty().hide();
    var wrap = button.closest('tr');
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/edition/delete/' + wrap.data('id'), {}, 'DELETE').then(function (apiResponse) {
      wrap.remove();
    }).catch(function (errorMessage) {
      BDB_Editions.errorWrap.append(errorMessage).show();
    }).finally(function () {
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/admin/modules/license.js":
/*!************************************************!*\
  !*** ./assets/js/src/admin/modules/license.js ***!
  \************************************************/
/*! exports provided: BDB_License */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_License", function() { return BDB_License; });
/* harmony import */ var utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils */ "./assets/js/src/utils/index.js");
/* global $, bdbVars, wp, ajaxurl */

/**
 * License Key
 */

var BDB_License = {
  responseWrap: false,

  /**
   * Initialize
   */
  init: function init() {
    this.responseWrap = $('#bdb-license-key-response');
    $('#bdb-activate-license-key').on('click', this.activate);
    $('#bdb-deactivate-license-key').on('click', this.deactivate);
    $('#bdb-refresh-license-key').on('click', this.refresh);
  },

  /**
   * Activate a license key
   *
   * @param e
   */
  activate: function activate(e) {
    e.preventDefault();
    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_License.responseWrap.empty().removeClass('bdb-notice bdb-notice-error');
    var args = {
      action: 'bdb_activate_license_key',
      license_key: $('#bdb-license-key').val(),
      nonce: button.data('nonce')
    };
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["ajaxRequest"])(args).then(function (apiResponse) {
      BDB_License.responseWrap.empty().addClass('bdb-notice bdb-notice-success').append(apiResponse);
      $('#bdb-activate-license-key').remove();
    }).catch(function (errorMessage) {
      BDB_License.responseWrap.empty().addClass('bdb-notice bdb-notice-error').append(errorMessage);
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  },

  /**
   * Deactivate a license key
   *
   * @param e
   */
  deactivate: function deactivate(e) {
    e.preventDefault();
    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_License.responseWrap.empty().removeClass('bdb-notice bdb-notice-error');
    var args = {
      action: 'bdb_deactivate_license_key',
      license_key: $('#bdb-license-key').val(),
      nonce: button.data('nonce')
    };
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["ajaxRequest"])(args).then(function (apiResponse) {
      BDB_License.responseWrap.empty().addClass('bdb-notice bdb-notice-success').append(apiResponse);
      $('#bdb-deactivate-license-key').remove();
    }).catch(function (errorMessage) {
      BDB_License.responseWrap.empty().addClass('bdb-notice bdb-notice-error').append(errorMessage);
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  },

  /**
   * Refresh the license key status
   *
   * @param e
   */
  refresh: function refresh(e) {
    e.preventDefault();
    var button = $(this),
        wrap = button.parent().find('.description');
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_License.responseWrap.empty().removeClass('bdb-notice bdb-notice-error');
    var args = {
      action: 'bdb_refresh_license_key',
      license_key: $('#bdb-license-key').val(),
      nonce: button.data('nonce')
    };
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["ajaxRequest"])(args).then(function (apiResponse) {
      wrap.empty().append(apiResponse);
    }).catch(function (errorMessage) {
      BDB_License.responseWrap.empty().addClass('bdb-notice bdb-notice-error').append(errorMessage);
    }).finally(function () {
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/admin/modules/media-upload.js":
/*!*****************************************************!*\
  !*** ./assets/js/src/admin/modules/media-upload.js ***!
  \*****************************************************/
/*! exports provided: BDB_Media */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_Media", function() { return BDB_Media; });
/* global $, bdbVars, wp */

/**
 * Interface with the WP media modal
 */
var BDB_Media = {
  frame: false,

  /**
   * Initialize
   */
  init: function init() {
    $('.bdb-upload-image').on('click', this.createFrame);
    $('.bdb-remove-image').on('click', this.removeImage);
  },

  /**
   * Create and open the media frame
   *
   * @param e
   */
  createFrame: function createFrame(e) {
    e.preventDefault();
    var button = $(this),
        imageField = $(this).parent().data('image'),
        imageIDField = $(this).parent().data('image-id'),
        imageSize = $(this).parent().data('image-size');

    if (!imageSize || 'undefined' === typeof imageSize) {
      imageSize = 'medium';
    } // Create the media frame.


    BDB_Media.frame = wp.media.frames.bookDB = wp.media({
      title: button.data('choose'),
      button: {
        text: button.data('update')
      },
      states: [new wp.media.controller.Library({
        title: button.data('choose'),
        filterable: 'all',
        multiple: false
      })]
    }); // When an image is selected, run a callback.

    BDB_Media.frame.on('select', function () {
      var selection = BDB_Media.frame.state().get('selection');
      selection.map(function (attachment) {
        attachment = attachment.toJSON();

        if (attachment.id) {
          $(imageIDField).val(attachment.id);
          var attachmentImage = attachment.sizes && attachment.sizes[imageSize] ? attachment.sizes[imageSize].url : attachment.url; // Remove all image attributes.

          if ('undefined' !== typeof $(imageField).attributes) {
            while ($(imageField).attributes.length > 0) {
              elem.removeAttribute(elem.attributes[0].name);
            }
          } // Update image src and alt text, then show image.


          $(imageField).attr('src', attachmentImage).attr('alt', attachment.alt).show(); // Show remove button.

          button.parent().find('.bdb-remove-image').show();
        }
      });
    }); // Finally, open the modal.

    BDB_Media.frame.open();
  },

  /**
   * Remove the chosen image
   *
   * @param e
   */
  removeImage: function removeImage(e) {
    e.preventDefault();
    var button = $(this),
        imageField = button.parent().data('image'),
        imageIDField = button.parent().data('image-id'); // Remove image attributes and hide.

    if ('undefined' !== typeof $(imageField).attributes) {
      while ($(imageField).attributes.length > 0) {
        elem.removeAttribute(elem.attributes[0].name);
      }
    }

    $(imageField).hide(); // Delete image ID value.

    $(imageIDField).val(''); // Now hide the remove button.

    button.hide();
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/admin/modules/reading-logs.js":
/*!*****************************************************!*\
  !*** ./assets/js/src/admin/modules/reading-logs.js ***!
  \*****************************************************/
/*! exports provided: BDB_Reading_Logs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_Reading_Logs", function() { return BDB_Reading_Logs; });
/* harmony import */ var utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils */ "./assets/js/src/utils/index.js");
/* harmony import */ var _dates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dates */ "./assets/js/src/admin/modules/dates.js");
/* global $, bdbVars, wp */


/**
 * Editions
 */

var BDB_Reading_Logs = {
  bookID: 0,
  userID: 0,
  maxPages: 0,
  tableBody: false,
  rowTemplate: wp.template('bdb-reading-logs-table-row'),
  rowEmptyTemplate: wp.template('bdb-reading-logs-table-row-empty'),
  errorWrap: '',
  userFilter: false,

  /**
   * Initialize
   */
  init: function init() {
    this.bookID = $('#bdb-book-id').val();
    this.userID = $('#bdb-book-reading-logs-list').data('user-id');
    this.tableBody = $('#bdb-book-reading-logs-list .wp-list-table tbody');
    this.errorWrap = $('#bdb-reading-logs-errors');
    this.userFilter = $('#bdb-book-reading-logs-user-filter');

    if (!this.tableBody.length || 'undefined' === typeof this.bookID || !this.bookID) {
      return;
    }

    this.maxPages = $('#bdb-book-pages').val();
    $('#bdb-add-reading-log').on('click', this.toggleNewLogFields);
    $('#bdb-submit-new-reading-log').on('click', this.addLog);
    $(document).on('click', '.bdb-reading-log-toggle-editable', this.toggleEditableFields);
    $(document).on('click', '.bdb-reading-log-percentage-complete .bdb-input-suffix', this.toggleCompleteUnit);
    $(document).on('click', '.bdb-update-reading-log', this.updateLog);
    $(document).on('click', '.bdb-remove-reading-log', this.removeLog);
    this.userFilter.on('change', this.getLogs);
    this.userFilter.trigger('change');
  },

  /**
   * Set up the object for use in the template
   *
   * - Convert UTC dates to local
   * - Set up the percentage for display (0 - 100)
   *
   * @param {object} readingLog
   * @returns {object}
   */
  shapeObject: function shapeObject(readingLog) {
    readingLog.date_started_formatted = Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateUTCtoLocal"])(readingLog.date_started, 'display');
    readingLog.date_started = Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateUTCtoLocal"])(readingLog.date_started);
    readingLog.date_finished_formatted = Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateUTCtoLocal"])(readingLog.date_finished, 'display');
    readingLog.date_finished = Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateUTCtoLocal"])(readingLog.date_finished);
    readingLog.percentage_complete = (readingLog.percentage_complete * 100).toFixed(0);
    readingLog.rating = null === readingLog.rating ? null : parseFloat(readingLog.rating);
    readingLog.rating_formatted = null === readingLog.rating ? null : parseFloat(readingLog.rating) + ' ' + bdbVars.stars;
    return readingLog;
  },

  /**
   * Get the reading logs
   */
  getLogs: function getLogs() {
    var args = {
      book_id: BDB_Reading_Logs.bookID,
      number: 50
    };

    if ($('#bdb-book-reading-logs-user-filter').prop('checked')) {
      args.user_id = BDB_Reading_Logs.userID;
    }

    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/reading-log', args, 'GET').then(function (response) {
      BDB_Reading_Logs.tableBody.empty();

      if (0 === response.length || 'undefined' === typeof response.length) {
        BDB_Reading_Logs.tableBody.append(BDB_Reading_Logs.rowEmptyTemplate);
      } else {
        $('#bdb-book-reading-logs-empty').remove();
        $.each(response, function (key, readingLog) {
          readingLog = BDB_Reading_Logs.shapeObject(readingLog);
          BDB_Reading_Logs.tableBody.append(BDB_Reading_Logs.rowTemplate(readingLog));
        });
      }

      $(document).trigger('bdb_reading_logs_loaded');
    }).catch(function (error) {
      BDB_Reading_Logs.errorWrap.empty().append(error).show();
    });
  },

  /**
   * Toggle the new log fields
   *
   * @param e
   */
  toggleNewLogFields: function toggleNewLogFields(e) {
    if ('undefined' !== typeof e) {
      e.preventDefault();
    }

    $('#bdb-new-reading-log-fields').slideToggle();
  },

  /**
   * Add a new reading log
   *
   * @param e
   */
  addLog: function addLog(e) {
    e.preventDefault();
    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Reading_Logs.errorWrap.empty().hide();
    var percentage = $('#bdb-new-log-percent-complete').val();

    if ('' !== percentage && percentage > 0) {
      percentage = percentage / 100;
    } else {
      percentage = 0;
    }

    var args = {
      book_id: BDB_Reading_Logs.bookID,
      user_id: BDB_Reading_Logs.userID,
      date_started: Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateLocalToUTC"])($('#bdb-new-log-start-date').val()),
      date_finished: Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateLocalToUTC"])($('#bdb-new-log-end-date').val()),
      percentage_complete: percentage,
      rating: $('#bdb-new-log-rating').val()
    };
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/reading-log/add', args, 'POST').then(function (apiResponse) {
      apiResponse = BDB_Reading_Logs.shapeObject(apiResponse);
      $('#bdb-book-reading-logs-empty').remove();
      BDB_Reading_Logs.tableBody.append(BDB_Reading_Logs.rowTemplate(apiResponse)); // Wipe new field values.

      var newFieldsWrap = $('#bdb-new-reading-log-fields');
      newFieldsWrap.find('input[type="text"]').val('');
      newFieldsWrap.find('input[type="checkbox"]').prop('checked', false);
      BDB_Reading_Logs.toggleNewLogFields(); // Trigger event

      $(document).trigger('bdb_reading_log_added', apiResponse);
    }).catch(function (errorMessage) {
      BDB_Reading_Logs.errorWrap.append(errorMessage).show();
    }).finally(function () {
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  },

  /**
   * Toggle the editable reading log fields
   *
   * @param e
   */
  toggleEditableFields: function toggleEditableFields(e) {
    e.preventDefault();
    var button = $(this);
    var wrap = button.closest('tr');
    wrap.find('.bdb-table-display-value').hide();
    wrap.find('.bdb-table-edit-value').show();
    button.removeClass('bdb-reading-log-toggle-editable').addClass('bdb-update-reading-log button-primary').text(bdbVars.save);
  },

  /**
   * Toggle the fields for the chosen unit (page vs percentage)
   *
   * @param e
   */
  toggleCompleteUnit: function toggleCompleteUnit(e) {
    e.preventDefault();
    var wrap = $(this).closest('.bdb-reading-log-percentage-complete');
    var type = 'percentage';

    if ($(this).hasClass('bdb-input-suffix-page')) {
      type = 'page';
    } // Change which one is selected.


    wrap.find('.bdb-input-suffix').removeClass('bdb-input-suffix-selected');
    $(this).addClass('bdb-input-suffix-selected'); // Show/hide relevant inputs.

    if ('page' === type) {
      wrap.find('.bdb-reading-log-percentage-complete-wrap').hide();
      wrap.find('.bdb-reading-log-page-wrap').show();
    } else {
      wrap.find('.bdb-reading-log-percentage-complete-wrap').show();
      wrap.find('.bdb-reading-log-page-wrap').hide();
    }
  },

  /**
   * Update a reading log
   *
   * @param e
   */
  updateLog: function updateLog(e) {
    e.preventDefault();
    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Reading_Logs.errorWrap.empty().hide();
    var wrap = button.closest('tr'); // Figure out if we're working with page numbers or percentages.

    var percentage = 0,
        unitType = 'percentage',
        selectedSuffix = wrap.find('.bdb-input-suffix-selected');

    if (selectedSuffix.hasClass('bdb-input-suffix-page')) {
      unitType = 'page';
    }

    if ('page' === unitType) {
      // Page number.
      var pageNumber = wrap.find('.bdb-reading-log-page-wrap input').val();
      percentage = BDB_Reading_Logs.maxPages > 0 ? pageNumber / BDB_Reading_Logs.maxPages : 0;
    } else {
      // Percentage.
      percentage = wrap.find('.bdb-reading-log-percentage-complete-wrap input').val();

      if ('' !== percentage && percentage > 0) {
        percentage = percentage / 100;
      } else {
        percentage = 0;
      }
    }

    var args = {
      date_started: Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateLocalToUTC"])(wrap.find('.bdb-reading-log-date-started input').val()),
      date_finished: Object(_dates__WEBPACK_IMPORTED_MODULE_1__["dateLocalToUTC"])(wrap.find('.bdb-reading-log-date-finished input').val()),
      user_id: wrap.find('.bdb-reading-log-user-id input').val(),
      percentage_complete: percentage,
      rating: wrap.find('.bdb-reading-log-rating select').val()
    };
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/reading-log/update/' + wrap.data('id'), args, 'POST').then(function (apiResponse) {
      apiResponse = BDB_Reading_Logs.shapeObject(apiResponse);
      wrap.replaceWith(BDB_Reading_Logs.rowTemplate(apiResponse));
      $(document).trigger('bdb_reading_log_updated', apiResponse);
    }).catch(function (errorMessage) {
      BDB_Reading_Logs.errorWrap.append(errorMessage).show();
    }).finally(function () {
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  },

  /**
   * Delete an edition
   *
   * @param e
   * @returns {boolean}
   */
  removeLog: function removeLog(e) {
    e.preventDefault();

    if (!confirm(bdbVars.confirm_delete_reading_log)) {
      return false;
    }

    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Reading_Logs.errorWrap.empty().hide();
    var wrap = button.closest('tr');
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/reading-log/delete/' + wrap.data('id'), {}, 'DELETE').then(function (apiResponse) {
      wrap.remove();
    }).catch(function (errorMessage) {
      BDB_Reading_Logs.errorWrap.append(errorMessage).show();
    }).finally(function () {
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/admin/modules/retailers.js":
/*!**************************************************!*\
  !*** ./assets/js/src/admin/modules/retailers.js ***!
  \**************************************************/
/*! exports provided: BDB_Retailers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_Retailers", function() { return BDB_Retailers; });
/* harmony import */ var utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils */ "./assets/js/src/utils/index.js");
/* global $, bdbVars, wp */

/**
 * Retailers
 */

var BDB_Retailers = {
  tableBody: false,
  rowTemplate: wp.template('bdb-retailers-table-row'),
  rowEmptyTemplate: wp.template('bdb-retailers-table-row-empty'),
  errorWrap: '',

  /**
   * Initialize
   */
  init: function init() {
    this.tableBody = $('#bdb-retailers tbody');
    this.errorWrap = $('#bdb-retailers-errors');

    if (!this.tableBody.length) {
      return;
    }

    $('#bdb-new-retailer-fields').on('keydown', 'input', this.clickOnEnter);
    $('#bdb-new-retailer-fields').on('click', 'button', this.addRetailer);
    $(document).on('click', '.bdb-update-retailer', this.updateRetailer);
    $(document).on('click', '.bdb-remove-retailer', this.deleteRetailer);
    this.getRetailers();
  },

  /**
   * Get the list of retailers
   */
  getRetailers: function getRetailers() {
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/retailer', {
      number: 50
    }, 'GET').then(function (response) {
      BDB_Retailers.tableBody.empty();

      if (0 === response.length || 'undefined' === typeof response.length) {
        BDB_Retailers.tableBody.append(BDB_Retailers.rowEmptyTemplate);
      } else {
        $('#bdb-retailers-empty').remove();
        $.each(response, function (key, taxonomy) {
          BDB_Retailers.tableBody.append(BDB_Retailers.rowTemplate(taxonomy));
        });
      }
    }).catch(function (error) {
      BDB_Retailers.errorWrap.empty().append(error).show();
    });
  },

  /**
   * Trigger a button click when pressing `enter` inside an `<input>` field.
   *
   * @param e
   */
  clickOnEnter: function clickOnEnter(e) {
    if (13 === e.keyCode) {
      e.preventDefault();
      $('#bdb-new-retailer-fields').find('button').trigger('click');
    }
  },

  /**
   * Add a new retailer
   *
   * @param e
   */
  addRetailer: function addRetailer(e) {
    e.preventDefault();
    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Retailers.errorWrap.empty().hide();
    var args = {
      name: $('#bdb-new-retailer-name').val(),
      template: $('#bdb-new-retailer-template').val()
    };
    BDB_Retailers.checkRequiredFields(args).then(function (requirementsResponse) {
      return Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/retailer/add', args, 'POST');
    }).then(function (apiResponse) {
      $('#bdb-retailers-empty').remove();
      BDB_Retailers.tableBody.append(BDB_Retailers.rowTemplate(apiResponse)); // Wipe field values.

      $('#bdb-newretailer-fields').find('input').val('');
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    }).catch(function (errorMessage) {
      BDB_Retailers.errorWrap.append(errorMessage).show();
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  },

  /**
   * Update a retailer
   *
   * @param e
   */
  updateRetailer: function updateRetailer(e) {
    e.preventDefault();
    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Retailers.errorWrap.empty().hide();
    var wrap = button.closest('tr');
    var args = {
      name: wrap.find('.bdb-retailer-name input').val(),
      template: wrap.find('.bdb-retailer-template textarea').val()
    };
    BDB_Retailers.checkRequiredFields(args).then(function (requirementsResponse) {
      return Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/retailer/update/' + wrap.data('id'), args, 'POST');
    }).then(function (apiResponse) {
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    }).catch(function (errorMessage) {
      BDB_Retailers.errorWrap.append(errorMessage).show();
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  },

  /**
   * Delete a retailer
   *
   * @param e
   * @returns {boolean}
   */
  deleteRetailer: function deleteRetailer(e) {
    e.preventDefault();
    var button = $(this),
        unconfirmed = false;
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Retailers.errorWrap.empty().hide();
    var wrap = button.closest('tr'),
        retailerID = wrap.data('id'),
        confirmMessage = bdbVars.confirm_delete_retailer;
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/book-link', {
      retailer_id: retailerID,
      number: 1
    }, 'GET').then(function (purchaseLinks) {
      if ('undefined' !== typeof purchaseLinks && 'undefined' !== typeof purchaseLinks.length && purchaseLinks.length > 0) {
        confirmMessage = bdbVars.confirm_delete_retailer_links;
      }

      if (!confirm(confirmMessage)) {
        unconfirmed = true;
        throw Error();
      }

      return Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/retailer/delete/' + retailerID, {}, 'DELETE');
    }).then(function (apiResponse) {
      wrap.remove();
    }).catch(function (errorMessage) {
      if (!unconfirmed) {
        BDB_Retailers.errorWrap.append(errorMessage).show();
      }
    }).finally(function () {
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  },

  /**
   * Check required fields are filled out
   *
   * @param {object} args
   * @returns {Promise}
   */
  checkRequiredFields: function checkRequiredFields(args) {
    return new Promise(function (resolve, reject) {
      if (!args.hasOwnProperty('name') || '' === args.name) {
        reject(bdbVars.error_required_fields);
        return;
      }

      resolve();
    });
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/admin/modules/tags.js":
/*!*********************************************!*\
  !*** ./assets/js/src/admin/modules/tags.js ***!
  \*********************************************/
/*! exports provided: BDB_Tags */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_Tags", function() { return BDB_Tags; });
/* global $, bdbVars, wp */

/**
 * Autocomplete for tags
 */
var BDB_Tags = {
  tag: false,

  /**
   * Initialize
   */
  init: function init() {
    this.tag = $('.bdb-ajaxtag');

    if (!this.tag.length) {
      return;
    }

    $('.bdb-tags-wrap').each(function () {
      BDB_Tags.quickClicks($(this));
    });
    $('.button', BDB_Tags.tag).on('click', function () {
      BDB_Tags.flushTags($(this).closest('.bdb-tags-wrap'));
    });
    BDB_Tags.tag.each(function () {
      var newTag = $('.bdb-new-tag', $(this));
      var taxonomy = $(this).closest('.bdb-tags-wrap').data('taxonomy');
      var apiURL = bdbVars.api_base + 'book-database/v1/book-term/suggest/?taxonomy=' + taxonomy + '&format=text&_wpnonce=' + bdbVars.api_nonce;

      if ('author' === taxonomy) {
        apiURL = bdbVars.api_base + 'book-database/v1/author/suggest/?format=text&_wpnonce=' + bdbVars.api_nonce;
      }

      newTag.on('keyup', function (e) {
        if (13 === e.which) {
          BDB_Tags.flushTags($(this).closest('.bdb-tags-wrap'));
          return false;
        }
      }).on('keypress', function (e) {
        if (13 === e.which) {
          e.preventDefault();
          return false;
        }
      }).suggest(apiURL);
    });
    $('#bdb-book-series-name').suggest(bdbVars.api_base + 'book-database/v1/series/suggest/?format=text&_wpnonce=' + bdbVars.api_nonce); // Save tags on save/publish

    $('.bdb-admin-page > form').on('submit', function (e) {
      $('.bdb-tags-wrap').each(function () {
        BDB_Tags.flushTags(this, false, 1);
      });
    });
  },

  /**
   * Clean tags
   *
   * @param tags
   */
  clean: function clean(tags) {
    return tags.replace(/\s*,\s*/g, ',').replace(/,+/g, ',').replace(/[,\s]+$/, '').replace(/^[,\s]+/, '');
  },

  /**
   * Parse tags
   *
   * @param el
   */
  parseTags: function parseTags(el) {
    var id = el.id;
    var num = id.split('-check-num-')[1];
    var tagBox = $(el).closest('.bdb-tags-wrap');
    var theTags = tagBox.find('textarea');
    var currentTags = theTags.val().split(',');
    var newTags = [];
    delete currentTags[num];
    $.each(currentTags, function (key, val) {
      val = $.trim(val);

      if (val) {
        newTags.push(val);
      }
    });
    theTags.val(BDB_Tags.clean(newTags.join(',')));
    BDB_Tags.quickClicks(tagBox);
    return false;
  },

  /**
   * Handles adding tags
   *
   * @param el
   */
  quickClicks: function quickClicks(el) {
    var theTags = $('textarea', el);
    var tagChecklist = $('.bdb-tags-checklist', el);
    var id = $(el).attr('id');
    var currentTags;
    var disabled;

    if (!theTags.length) {
      return;
    }

    disabled = theTags.prop('disabled');
    currentTags = theTags.val().split(',');
    tagChecklist.empty();
    $.each(currentTags, function (key, val) {
      var span, xbutton;
      val = $.trim(val);

      if (!val) {
        return;
      } // Create a new span and ensure the text is properly escaped.


      span = $('<span />').text(val); // If tags editing isn't disabled, create the X button.

      if (!disabled) {
        xbutton = $('<a id="' + id + '-check-num-' + key + '" class="ntdelbutton">X</a>');
        xbutton.on('click', function (e) {
          BDB_Tags.parseTags(this);
        });
        span.prepend('&nbsp;').prepend(xbutton);
      } // Append the span to the tag list.


      tagChecklist.append(span);
    });
  },

  /**
   * Flush tags on add tag and save
   *
   * @param el
   * @param a
   * @param f
   */
  flushTags: function flushTags(el, a, f) {
    a = a || false;
    var text;
    var tags = $('textarea', el);
    var newTag = $('.bdb-new-tag', el);
    var tagsVal, newTags;
    text = a ? a.text() : newTag.val();
    tagsVal = tags.val();
    newTags = tagsVal ? tagsVal + ',' + text : text;
    newTags = BDB_Tags.clean(newTags);
    newTags = BDB_Tags.uniqueArray(newTags.split(',')).join(',');
    tags.val(newTags);
    BDB_Tags.quickClicks(el);

    if (!a) {
      newTag.val('');
    }

    if ('undefined' === typeof f) {
      newTag.focus();
    }

    return false;
  },

  /**
   * Create a unique array with no empty values
   *
   * @param {array} array
   *
   * @returns {array}
   */
  uniqueArray: function uniqueArray(array) {
    var out = [];
    $.each(array, function (key, val) {
      val = $.trim(val);

      if (val && -1 === $.inArray(val, out)) {
        out.push(val);
      }
    });
    return out;
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/admin/modules/taxonomies.js":
/*!***************************************************!*\
  !*** ./assets/js/src/admin/modules/taxonomies.js ***!
  \***************************************************/
/*! exports provided: BDB_Book_Taxonomies */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BDB_Book_Taxonomies", function() { return BDB_Book_Taxonomies; });
/* harmony import */ var utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils */ "./assets/js/src/utils/index.js");
/* global $, bdbVars, wp */

/**
 * Book Taxonomies
 */

var BDB_Book_Taxonomies = {
  tableBody: false,
  rowTemplate: wp.template('bdb-taxonomies-table-row'),
  rowEmptyTemplate: wp.template('bdb-taxonomies-table-row-empty'),
  errorWrap: '',

  /**
   * Initialize
   */
  init: function init() {
    this.tableBody = $('#bdb-book-taxonomies tbody');
    this.errorWrap = $('#bdb-book-taxonomies-errors');

    if (!this.tableBody.length) {
      return;
    }

    $('#bdb-new-book-taxonomy-name').on('keyup', this.generateSlug);
    $('#bdb-new-book-taxonomy-fields').on('keydown', 'input', this.clickOnEnter);
    $('#bdb-new-book-taxonomy-fields').on('click', '.button-primary', this.addTaxonomy);
    $(document).on('click', '.bdb-update-book-taxonomy', this.updateTaxonomy);
    $(document).on('click', '.bdb-remove-book-taxonomy', this.deleteTaxonomy);
    this.getTaxonomies();
  },

  /**
   * Get the list of taxonomies
   */
  getTaxonomies: function getTaxonomies() {
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/taxonomy', {
      number: 50
    }, 'GET').then(function (response) {
      BDB_Book_Taxonomies.tableBody.empty();

      if (0 === response.length || 'undefined' === typeof response.length) {
        BDB_Book_Taxonomies.tableBody.append(BDB_Book_Taxonomies.rowEmptyTemplate);
      } else {
        $('#bdb-book-taxonomies-empty').remove();
        $.each(response, function (key, taxonomy) {
          BDB_Book_Taxonomies.tableBody.append(BDB_Book_Taxonomies.rowTemplate(taxonomy));
        });
      }
    }).catch(function (error) {
      BDB_Book_Taxonomies.errorWrap.empty().append(error).show();
    });
  },

  /**
   * Automatically generate a slug from the name
   *
   * @param e
   */
  generateSlug: function generateSlug(e) {
    var name = $('#bdb-new-book-taxonomy-name').val();
    var slug = name.toLowerCase().replace(/[^a-z0-9_\-]/g, '');
    $('#bdb-new-book-taxonomy-slug').val(slug);
  },

  /**
   * Trigger a button click when pressing `enter` inside an `<input>` field.
   *
   * @param e
   */
  clickOnEnter: function clickOnEnter(e) {
    if (13 === e.keyCode) {
      e.preventDefault();
      $('#bdb-new-book-taxonomy-fields').find('button').trigger('click');
    }
  },

  /**
   * Add a new taxonomy
   *
   * @param e
   */
  addTaxonomy: function addTaxonomy(e) {
    e.preventDefault();
    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Book_Taxonomies.errorWrap.empty().hide();
    var args = {
      name: $('#bdb-new-book-taxonomy-name').val(),
      slug: $('#bdb-new-book-taxonomy-slug').val(),
      format: $('#bdb-new-book-taxonomy-format').val()
    };
    BDB_Book_Taxonomies.checkRequiredFields(args).then(function (requirementsResponse) {
      return Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/taxonomy/add', args, 'POST');
    }).then(function (apiResponse) {
      $('#bdb-book-taxonomies-empty').remove();
      BDB_Book_Taxonomies.tableBody.append(BDB_Book_Taxonomies.rowTemplate(apiResponse)); // Wipe field values.

      $('#bdb-new-book-taxonomy-fields').find('input').val('');
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    }).catch(function (errorMessage) {
      BDB_Book_Taxonomies.errorWrap.append(errorMessage).show();
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  },

  /**
   * Update a taxonomy
   *
   * @param e
   */
  updateTaxonomy: function updateTaxonomy(e) {
    e.preventDefault();
    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Book_Taxonomies.errorWrap.empty().hide();
    var wrap = button.closest('tr');
    var args = {
      name: wrap.find('.bdb-book-taxonomy-name input').val(),
      slug: wrap.find('.bdb-book-taxonomy-slug input').val(),
      format: wrap.find('.bdb-book-taxonomy-format select').val()
    };
    BDB_Book_Taxonomies.checkRequiredFields(args).then(function (requirementsResponse) {
      return Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/taxonomy/update/' + wrap.data('id'), args, 'POST');
    }).then(function (apiResponse) {
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    }).catch(function (errorMessage) {
      BDB_Book_Taxonomies.errorWrap.append(errorMessage).show();
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  },

  /**
   * Delete a taxonomy
   *
   * @param e
   * @returns {boolean}
   */
  deleteTaxonomy: function deleteTaxonomy(e) {
    e.preventDefault();

    if (!confirm(bdbVars.confirm_delete_taxonomy)) {
      return false;
    }

    var button = $(this);
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["spinButton"])(button);
    BDB_Book_Taxonomies.errorWrap.empty().hide();
    var wrap = button.closest('tr');
    Object(utils__WEBPACK_IMPORTED_MODULE_0__["apiRequest"])('v1/taxonomy/delete/' + wrap.data('id'), {}, 'DELETE').then(function (apiResponse) {
      wrap.remove();
    }).catch(function (errorMessage) {
      BDB_Book_Taxonomies.errorWrap.append(errorMessage).show();
      Object(utils__WEBPACK_IMPORTED_MODULE_0__["unspinButton"])(button);
    });
  },

  /**
   * Check required fields are filled out
   *
   * @param {object} args
   * @returns {Promise}
   */
  checkRequiredFields: function checkRequiredFields(args) {
    return new Promise(function (resolve, reject) {
      if (!args.hasOwnProperty('name') || '' === args.name) {
        reject(bdbVars.error_required_fields);
        return;
      }

      if (!args.hasOwnProperty('slug') || '' === args.slug) {
        reject(bdbVars.error_required_fields);
        return;
      }

      if (!args.hasOwnProperty('format') || '' === args.format) {
        reject(bdbVars.error_required_fields);
        return;
      }

      resolve();
    });
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/utils/api-request.js":
/*!********************************************!*\
  !*** ./assets/js/src/utils/api-request.js ***!
  \********************************************/
/*! exports provided: apiRequest, ajaxRequest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apiRequest", function() { return apiRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ajaxRequest", function() { return ajaxRequest; });
/* global $, bdbVars, ajaxurl */

/**
 * Make a request to the REST API
 *
 * @param {string} endpoint
 * @param {object} data
 * @param {string} method
 * @returns {Promise}
 */
function apiRequest(endpoint) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'POST';
  var options = {
    method: method,
    url: bdbVars.api_base + 'book-database/' + endpoint,
    beforeSend: function beforeSend(xhr) {
      xhr.setRequestHeader('X-WP-Nonce', bdbVars.api_nonce);
    },
    xhrFields: {
      withCredentials: true
    },
    data: data
  }; //console.log( 'API endpoint', endpoint );

  return new Promise(function (resolve, reject) {
    $.ajax(options).success(function (response) {
      //console.log( 'Success response', response );
      resolve(response);
    }).error(function (qpXHR, textStatus, errorThrown) {
      var error = bdbVars.generic_erroc;

      if ('undefined' !== typeof qpXHR.responseJSON) {
        error = qpXHR.responseJSON;

        if ('undefined' !== typeof error.message) {
          error = error.message;
        }
      } else if ('undefined' !== typeof qpXHR.message) {
        error = qpXHR.message;
      }

      reject(error);
    });
  });
}
/**
 * Make an ajax request
 *
 * @param {object} args
 * @returns {Promise}
 */

function ajaxRequest(args) {
  var options = {
    method: 'POST',
    dataType: 'JSON',
    url: ajaxurl,
    data: args
  };
  return new Promise(function (resolve, reject) {
    $.ajax(options).success(function (response) {
      if (!response.success) {
        //console.log( 'Error response', response );
        reject(response.data);
      } else {
        //console.log( 'Success response', response );
        resolve(response.data);
      }
    }).error(function (qpXHR, textStatus, errorThrown) {
      var error = bdbVars.generic_erroc;

      if ('undefined' !== typeof qpXHR.responseJSON) {
        error = qpXHR.responseJSON;

        if ('undefined' !== typeof error.message) {
          error = error.message;
        }
      } else if ('undefined' !== typeof qpXHR.message) {
        error = qpXHR.message;
      }

      reject(error);
    });
  });
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./assets/js/src/utils/index.js":
/*!**************************************!*\
  !*** ./assets/js/src/utils/index.js ***!
  \**************************************/
/*! exports provided: apiRequest, ajaxRequest, spinButton, unspinButton, getStars */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api_request_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request.js */ "./assets/js/src/utils/api-request.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "apiRequest", function() { return _api_request_js__WEBPACK_IMPORTED_MODULE_0__["apiRequest"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ajaxRequest", function() { return _api_request_js__WEBPACK_IMPORTED_MODULE_0__["ajaxRequest"]; });

/* harmony import */ var _loaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loaders.js */ "./assets/js/src/utils/loaders.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "spinButton", function() { return _loaders_js__WEBPACK_IMPORTED_MODULE_1__["spinButton"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unspinButton", function() { return _loaders_js__WEBPACK_IMPORTED_MODULE_1__["unspinButton"]; });

/* harmony import */ var _ratings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ratings.js */ "./assets/js/src/utils/ratings.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getStars", function() { return _ratings_js__WEBPACK_IMPORTED_MODULE_2__["getStars"]; });





/***/ }),

/***/ "./assets/js/src/utils/loaders.js":
/*!****************************************!*\
  !*** ./assets/js/src/utils/loaders.js ***!
  \****************************************/
/*! exports provided: spinButton, unspinButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spinButton", function() { return spinButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unspinButton", function() { return unspinButton; });
/* global $, bdbVars */

/**
 * Spin a button
 *
 *      - Disables the button
 *      - Saves the current button text to `data-text`
 *      - Changes the text to either a WP-Admin spinner or "Please Wait..."
 *
 * @param button
 */
function spinButton(button) {
  var newText = bdbVars.is_admin ? '<span class="spinner is-active"></span>' : bdbVars.please_wait;
  button.prop('disabled', true).data('text', button.text()).html(newText);
}
/**
 * Unspin a button
 *
 *      - Enables teh button
 *      - Sets the text to the `data-text` attribute value
 *
 * @param button
 */

function unspinButton(button) {
  button.prop('disabled', false).text(button.data('text'));
}

/***/ }),

/***/ "./assets/js/src/utils/ratings.js":
/*!****************************************!*\
  !*** ./assets/js/src/utils/ratings.js ***!
  \****************************************/
/*! exports provided: getStars */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStars", function() { return getStars; });
/* global $, bdbVars */

/**
 * Convert a numberical star rating into HTML stars
 *
 * @param rating
 * @returns {string}
 */
function getStars(rating) {
  var html = '';
  var fullStars = Math.floor(rating);
  var halfStars = Math.ceil(rating - fullStars);
  var fullStarString = '&starf;';
  var halfStarString = '&half;';
  html += fullStarString.repeat(fullStars);
  html += halfStarString.repeat(halfStars);
  return html;
}

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ })

/******/ });
//# sourceMappingURL=admin.min.js.map